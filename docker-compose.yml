version: '3.9'

# Multi-environment docker compose (dev + prod profiles)
# Usage:
#   Development (hot reload, bind mounts):
#     docker compose --profile dev up --build
#   Production (compiled assets + nginx reverse proxy):
#     export JWT_SECRET=... ADMIN_EMAIL=... ADMIN_PASSWORD=...
#     docker compose --profile prod up -d --build
#
# Profiles:
#   dev  -> mongo, redis, backend-dev, frontend-dev
#   prod -> mongo, redis, backend, frontend, nginx
# Shared data stores have both profiles so either mode starts them.

x-backend-env-common: &backend-env-common
  USE_MONGO: "true"
  MONGO_URI: mongodb://mongo:27017
  MONGO_DB: eisenhower
  REDIS_URL: redis://redis:6379/0
  WEIGHT_URGENCY: "0.30"
  WEIGHT_IMPORTANCE: "0.30"
  WEIGHT_IMPACT: "0.20"
  WEIGHT_VALUE: "0.20"
  EFFORT_PENALTY: "0.15"
  DUE_SOON_DAYS: "5"
  DUE_SOON_MAX_BONUS: "0.15"

services:
  mongo:
    image: mongo:6.0
    restart: unless-stopped
    profiles: [dev, prod]
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 5s
      retries: 5
    ports:
      - "27017:27017"

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    profiles: [dev, prod]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 3s
      retries: 5
    ports:
      - "6379:6379"

  backend-dev:
    build:
      context: ./backend
      target: development
    profiles: [dev]
    environment:
      <<: *backend-env-common
      JWT_SECRET: ${JWT_SECRET:-change-me-dev}
      JWT_EXPIRE_MINUTES: ${JWT_EXPIRE_MINUTES:-30}
      REFRESH_TOKEN_EXPIRE_DAYS: ${REFRESH_TOKEN_EXPIRE_DAYS:-7}
      ENVIRONMENT: development
      ADMIN_EMAIL: ${ADMIN_EMAIL:-}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD:-}
    depends_on:
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 5s
      retries: 5

  frontend-dev:
    build:
      context: ./frontend
      target: development
    profiles: [dev]
    environment:
      NODE_ENV: development
      REACT_APP_API_BASE: http://localhost:8000/api
    depends_on:
      - backend-dev
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"

  backend:
    build:
      context: ./backend
      target: production
    profiles: [prod]
    environment:
      <<: *backend-env-common
      JWT_SECRET: ${JWT_SECRET:?JWT_SECRET required for prod}
      JWT_EXPIRE_MINUTES: ${JWT_EXPIRE_MINUTES:-15}
      REFRESH_TOKEN_EXPIRE_DAYS: ${REFRESH_TOKEN_EXPIRE_DAYS:-7}
      ENVIRONMENT: production
      ADMIN_EMAIL: ${ADMIN_EMAIL:-}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD:-}
    depends_on:
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: ["python","-m","uvicorn","app.main:app","--host","0.0.0.0","--port","8000","--workers","2"]
    expose:
      - "8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 5s
      retries: 5

  frontend:
    build:
      context: ./frontend
      target: production
    profiles: [prod]
    environment:
      REACT_APP_API_BASE: /api
    command: ["npx","serve","-s","build","-l","3000"]
    expose:
      - "3000"
    depends_on:
      - backend

  nginx:
    image: nginx:1.27-alpine
    profiles: [prod]
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
    depends_on:
      - frontend
      - backend
    restart: unless-stopped

volumes:
  mongo_data:
