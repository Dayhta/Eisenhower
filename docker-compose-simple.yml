version: '3.9'

# Simplified docker-compose for SQLite-based Eisenhower Matrix app
# Usage:
#   Development: docker-compose --profile dev up --build
#   Production: docker-compose --profile prod up -d --build

services:
  backend:
    build:
      context: ./backend
      target: ${TARGET:-development}
    profiles: [dev, prod]
    environment:
      - ENVIRONMENT=${TARGET:-development}
      - WEIGHT_URGENCY=${WEIGHT_URGENCY:-0.30}
      - WEIGHT_IMPORTANCE=${WEIGHT_IMPORTANCE:-0.30}
      - WEIGHT_IMPACT=${WEIGHT_IMPACT:-0.20}
      - WEIGHT_VALUE=${WEIGHT_VALUE:-0.20}
      - EFFORT_PENALTY=${EFFORT_PENALTY:-0.15}
      - DUE_SOON_DAYS=${DUE_SOON_DAYS:-5}
      - DUE_SOON_MAX_BONUS=${DUE_SOON_MAX_BONUS:-0.15}
    volumes:
      - ./backend:/app:rw  # For development hot reload
      - sqlite_data:/app/data  # Persistent SQLite storage
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  frontend:
    build:
      context: ./frontend
      target: ${TARGET:-development}
    profiles: [dev, prod]
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - REACT_APP_API_BASE=${REACT_APP_API_BASE:-http://localhost:8000/api}
    volumes:
      - ./frontend:/app:rw  # For development hot reload
      - /app/node_modules  # Prevent overwriting node_modules
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy

  nginx:
    build:
      context: ./nginx
    profiles: [prod]
    ports:
      - "80:80"
    depends_on:
      - backend
      - frontend
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro

volumes:
  sqlite_data:
    driver: local
